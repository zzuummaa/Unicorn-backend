package ru.zuma.auth;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;
import ru.zuma.database.UserRepository;

@Configuration
@EnableWebSecurity
public class SpringSecurityConfig extends WebSecurityConfigurerAdapter {

    private UserDetailsServiceMOC participantService = new UserDetailsServiceMOC();

    private final MyBasicAuthenticationEntryPoint entryPoint;

    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private final UserRepository userRepository;

    @Autowired
    public SpringSecurityConfig(MyBasicAuthenticationEntryPoint entryPoint, UserRepository userRepository) {
        this.entryPoint = entryPoint;
        this.userRepository = userRepository;
    }

    @Override
    public void configure(final AuthenticationManagerBuilder auth) throws Exception
    {
        auth.userDetailsService(this.participantService).passwordEncoder(this.passwordEncoder());
    }

    @Override
    protected void configure(final HttpSecurity http) throws Exception {
        final TokenAuthenticationFilter tokenFilter = new TokenAuthenticationFilter(entryPoint, userRepository);

        http.authorizeRequests()
            .anyRequest().authenticated()
            .and()
            .addFilterAfter(tokenFilter, BasicAuthenticationFilter.class);
    }

    public PasswordEncoder passwordEncoder() {
        return new PasswordEncoderMOC();
    }
}